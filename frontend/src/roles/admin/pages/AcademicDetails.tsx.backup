import React, { useState, useEffect, useRef } from 'react';
import {
  Plus, Save, Trash2, BookOpen, ChevronDown, ChevronRight,
  Search, Download, Upload, Copy, Eye, EyeOff, AlertTriangle,
  Check, X, Edit3, GripVertical
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import { useAuth } from '../../../auth/AuthContext';

interface Subject {
  _id?: string;
  name: string;
  code: string;
  description?: string;
  isActive: boolean;
  order?: number;
}

interface ClassSubjects {
  className: string;
  subjects: Subject[];
}

interface ValidationErrors {
  [key: string]: string[];
}

const AcademicDetails: React.FC = () => {
  const { token, user } = useAuth();
  const fileInputRef = useRef<HTMLInputElement>(null);

  // State management
  const [classSubjects, setClassSubjects] = useState<ClassSubjects[]>([]);
  const [expandedClasses, setExpandedClasses] = useState<Set<string>>(new Set());
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedClass, setSelectedClass] = useState<string>('all');
  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});
  const [showInactive, setShowInactive] = useState(false);

  // Standard classes with better categorization
  const classCategories = {
    'Pre-Primary': ['LKG', 'UKG'],
    'Primary': ['Grade 1', 'Grade 2', 'Grade 3', 'Grade 4', 'Grade 5'],
    'Secondary': ['Grade 6', 'Grade 7', 'Grade 8', 'Grade 9', 'Grade 10'],
    'Senior Secondary': ['Grade 11', 'Grade 12']
  };

  const standardClasses = Object.values(classCategories).flat();

  // Subject templates for quick setup
  const subjectTemplates = {
    'Primary': [
      { name: 'English', code: 'ENG', description: 'English Language' },
      { name: 'Mathematics', code: 'MATH', description: 'Mathematics' },
      { name: 'Science', code: 'SCI', description: 'General Science' },
      { name: 'Social Studies', code: 'SST', description: 'Social Studies' },
      { name: 'Hindi', code: 'HIN', description: 'Hindi Language' },
      { name: 'Computer Science', code: 'CS', description: 'Computer Science' },
      { name: 'Art Education', code: 'ART', description: 'Art and Craft' },
      { name: 'Physical Education', code: 'PE', description: 'Physical Education' }
    ],
    'Secondary': [
      { name: 'English', code: 'ENG', description: 'English Language' },
      { name: 'Mathematics', code: 'MATH', description: 'Mathematics' },
      { name: 'Physics', code: 'PHY', description: 'Physics' },
      { name: 'Chemistry', code: 'CHEM', description: 'Chemistry' },
      { name: 'Biology', code: 'BIO', description: 'Biology' },
      { name: 'History', code: 'HIST', description: 'History' },
      { name: 'Geography', code: 'GEO', description: 'Geography' },
      { name: 'Civics', code: 'CIV', description: 'Civics' },
      { name: 'Hindi', code: 'HIN', description: 'Hindi Language' },
      { name: 'Computer Science', code: 'CS', description: 'Computer Science' },
      { name: 'Physical Education', code: 'PE', description: 'Physical Education' }
    ],
    'Senior Secondary': [
      { name: 'English', code: 'ENG', description: 'English Language' },
      { name: 'Mathematics', code: 'MATH', description: 'Mathematics' },
      { name: 'Physics', code: 'PHY', description: 'Physics' },
      { name: 'Chemistry', code: 'CHEM', description: 'Chemistry' },
      { name: 'Biology', code: 'BIO', description: 'Biology' },
      { name: 'Accountancy', code: 'ACC', description: 'Accountancy' },
      { name: 'Business Studies', code: 'BST', description: 'Business Studies' },
      { name: 'Economics', code: 'ECO', description: 'Economics' },
      { name: 'Computer Science', code: 'CS', description: 'Computer Science' },
      { name: 'Physical Education', code: 'PE', description: 'Physical Education' }
    ]
  };

  // Initialize class subjects
  useEffect(() => {
    const initializeClasses = () => {
      const initialClassSubjects = standardClasses.map(className => ({
        className,
        subjects: []
      }));
      setClassSubjects(initialClassSubjects);
    };

    initializeClasses();
    fetchSubjects();
  }, []);

  // Fetch subjects from backend
  const fetchSubjects = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/subjects/all', {
        headers: {
          'Authorization': `Bearer ${token}`,
          ...(user?.schoolCode && { 'x-school-code': user.schoolCode })
        }
      });

      if (response.ok) {
        const data = await response.json();
        // Group subjects by class
        const groupedSubjects = standardClasses.map(className => ({
          className,
          subjects: data.subjects.filter((subject: any) => subject.className === className) || []
        }));
        setClassSubjects(groupedSubjects);
      } else {
        console.error('Failed to fetch subjects');
      }
    } catch (error) {
      console.error('Error fetching subjects:', error);
    } finally {
      setLoading(false);
    }
  };

  // Validation function
  const validateSubjects = () => {
    const errors: ValidationErrors = {};
    let hasErrors = false;

    classSubjects.forEach(classItem => {
      classItem.subjects.forEach((subject, index) => {
        const errorKey = `${classItem.className}-${index}`;
        const subjectErrors: string[] = [];

        if (!subject.name.trim()) {
          subjectErrors.push('Subject name is required');
        }

        if (!subject.code.trim()) {
          subjectErrors.push('Subject code is required');
        } else if (subject.code.length > 10) {
          subjectErrors.push('Subject code must be 10 characters or less');
        }

        // Check for duplicate codes within the same class
        const duplicateCode = classItem.subjects.find((s, i) =>
          i !== index && s.code.toLowerCase() === subject.code.toLowerCase()
        );
        if (duplicateCode) {
          subjectErrors.push('Subject code must be unique within the class');
        }

        if (subjectErrors.length > 0) {
          errors[errorKey] = subjectErrors;
          hasErrors = true;
        }
      });
    });

    setValidationErrors(errors);
    return !hasErrors;
  };

  // Update subject
  const updateSubject = (className: string, subjectIndex: number, field: keyof Subject, value: any) => {
    setClassSubjects(prev => prev.map(classItem =>
      classItem.className === className
        ? {
            ...classItem,
            subjects: classItem.subjects.map((subject, index) =>
              index === subjectIndex ? { ...subject, [field]: value } : subject
            )
          }
        : classItem
    ));

    // Clear validation error for this field
    const errorKey = `${className}-${subjectIndex}`;
    if (validationErrors[errorKey]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[errorKey];
        return newErrors;
      });
    }
  };

  // Add new subject
  const addSubject = (className: string) => {
    const newSubject: Subject = {
      name: '',
      code: '',
      description: '',
      isActive: true
    };

    setClassSubjects(prev => prev.map(classItem =>
      classItem.className === className
        ? { ...classItem, subjects: [...classItem.subjects, newSubject] }
        : classItem
    ));

    // Expand the class if not already expanded
    if (!expandedClasses.has(className)) {
      setExpandedClasses(prev => new Set([...prev, className]));
    }
  };

  // Add subjects from template
  const addSubjectsFromTemplate = (className: string) => {
    const classCategory = Object.entries(classCategories).find(([_, classes]) =>
      classes.includes(className)
    )?.[0];

    if (!classCategory || !subjectTemplates[classCategory as keyof typeof subjectTemplates]) {
      toast.error('No template available for this class');
      return;
    }

    const templateSubjects = subjectTemplates[classCategory as keyof typeof subjectTemplates]
      .map(template => ({
        ...template,
        isActive: true
      }));

    setClassSubjects(prev => prev.map(classItem =>
      classItem.className === className
        ? { ...classItem, subjects: [...classItem.subjects, ...templateSubjects] }
        : classItem
    ));

    // Expand the class if not already expanded
    if (!expandedClasses.has(className)) {
      setExpandedClasses(prev => new Set([...prev, className]));
    }

    toast.success(`Added ${templateSubjects.length} subjects from template`);
  };

  // Toggle class expansion
  const toggleClassExpansion = (className: string) => {
    setExpandedClasses(prev => {
      const newSet = new Set(prev);
      if (newSet.has(className)) {
        newSet.delete(className);
      } else {
        newSet.add(className);
      }
      return newSet;
    });
  };

  // Expand/collapse all
  const expandAll = () => {
    setExpandedClasses(new Set(standardClasses));
  };

  const collapseAll = () => {
    setExpandedClasses(new Set());
  };

  // Remove subject
  const removeSubject = (className: string, subjectIndex: number) => {
    if (window.confirm('Are you sure you want to remove this subject?')) {
      setClassSubjects(prev => prev.map(classItem =>
        classItem.className === className
          ? {
              ...classItem,
              subjects: classItem.subjects.filter((_, index) => index !== subjectIndex)
            }
          : classItem
      ));
    }
  };

  // Duplicate subject
  const duplicateSubject = (className: string, subjectIndex: number) => {
    const originalSubject = classSubjects.find(c => c.className === className)?.subjects[subjectIndex];
    if (originalSubject) {
      const duplicatedSubject = {
        ...originalSubject,
        _id: undefined,
        name: `${originalSubject.name} (Copy)`,
        code: `${originalSubject.code}_COPY`
      };

      setClassSubjects(prev => prev.map(classItem =>
        classItem.className === className
          ? {
              ...classItem,
              subjects: [
                ...classItem.subjects.slice(0, subjectIndex + 1),
                duplicatedSubject,
                ...classItem.subjects.slice(subjectIndex + 1)
              ]
            }
          : classItem
      ));
    }
  };

  // Filter logic
  const filteredClassSubjects = classSubjects
    .filter(classItem => {
      if (selectedClass !== 'all' && classItem.className !== selectedClass) return false;
      if (searchTerm) {
        const hasMatchingSubject = classItem.subjects.some(subject =>
          subject.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          subject.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
          subject.description?.toLowerCase().includes(searchTerm.toLowerCase())
        );
        return hasMatchingSubject || classItem.className.toLowerCase().includes(searchTerm.toLowerCase());
      }
      return true;
    })
    .map(classItem => ({
      ...classItem,
      subjects: showInactive
        ? classItem.subjects
        : classItem.subjects.filter(subject => subject.isActive)
    }));

  // Export functionality
  const exportSubjects = () => {
    const dataToExport = classSubjects.map(classItem => ({
      class: classItem.className,
      subjects: classItem.subjects.map(subject => ({
        name: subject.name,
        code: subject.code,
        description: subject.description,
        isActive: subject.isActive
      }))
    }));

    const dataStr = JSON.stringify(dataToExport, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

    const exportFileDefaultName = `subjects-${user?.schoolCode || 'school'}-${new Date().toISOString().split('T')[0]}.json`;

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();

    toast.success('Subjects exported successfully');
  };

  // Save changes
  const saveChanges = async () => {
    if (!validateSubjects()) {
      toast.error('Please fix validation errors before saving');
      return;
    }

    setSaving(true);
    try {
      // Prepare subjects data for saving
      const allSubjects = classSubjects.flatMap(classItem =>
        classItem.subjects
          .filter(subject => subject.name.trim() && subject.code.trim())
          .map(subject => ({
            ...subject,
            className: classItem.className
          }))
      );

      const response = await fetch('/api/subjects/bulk-save', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          ...(user?.schoolCode && { 'x-school-code': user.schoolCode })
        },
        body: JSON.stringify({ subjects: allSubjects })
      });

      if (response.ok) {
        toast.success('Subjects saved successfully');
        fetchSubjects(); // Refresh data
      } else {
        throw new Error('Failed to save subjects');
      }
    } catch (error) {
      console.error('Error saving subjects:', error);
      toast.error('Failed to save subjects');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-4 text-lg">Loading subjects...</span>
      </div>
    );
  }

  const totalSubjects = classSubjects.reduce((acc, classItem) => acc + classItem.subjects.length, 0);
  const activeSubjects = classSubjects.reduce((acc, classItem) =>
    acc + classItem.subjects.filter(s => s.isActive).length, 0
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 flex items-center">
              <BookOpen className="mr-3 text-blue-600" size={28} />
              Academic Details
            </h2>
            <p className="text-gray-600 mt-1">Manage subjects for each class in your school</p>
            <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
              <span>Total Classes: {standardClasses.length}</span>
              <span>Total Subjects: {totalSubjects}</span>
              <span>Active Subjects: {activeSubjects}</span>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={exportSubjects}
              className="flex items-center px-3 py-2 text-gray-700 hover:text-gray-900 border hover:bg-gray-50 rounded-md transition-colors"
            >
              <Download size={16} className="mr-2" />
              Export
            </button>
            <button
              onClick={saveChanges}
              disabled={saving}
              className={`flex items-center px-6 py-2 rounded-md font-medium transition-colors ${
                saving
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 text-white'
              }`}
            >
              <Save size={16} className="mr-2" />
              {saving ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="flex flex-wrap items-center gap-4 p-4 bg-gray-50 rounded-lg">
          <div className="flex-1 min-w-64">
            <div className="relative">
              <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search subjects or classes..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <select
            value={selectedClass}
            onChange={(e) => setSelectedClass(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">All Classes</option>
            {Object.entries(classCategories).map(([category, classes]) => (
              <optgroup key={category} label={category}>
                {classes.map(className => (
                  <option key={className} value={className}>{className}</option>
                ))}
              </optgroup>
            ))}
          </select>

          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={showInactive}
              onChange={(e) => setShowInactive(e.target.checked)}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-sm text-gray-700">Show inactive</span>
          </label>

          <div className="flex items-center space-x-2">
            <button
              onClick={expandAll}
              className="px-3 py-1 text-xs text-blue-600 hover:text-blue-700"
            >
              Expand All
            </button>
            <button
              onClick={collapseAll}
              className="px-3 py-1 text-xs text-blue-600 hover:text-blue-700"
            >
              Collapse All
            </button>
          </div>
        </div>
      </div>

      {/* Subjects by Class */}
      <div className="space-y-4">
        {filteredClassSubjects.map((classItem) => {
          const errorCount = Object.keys(validationErrors).filter(key => key.startsWith(classItem.className)).length;

          return (
            <div key={classItem.className} className="bg-white rounded-lg shadow-sm border">
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <button
                    onClick={() => toggleClassExpansion(classItem.className)}
                    className="flex items-center space-x-3 text-left hover:bg-gray-50 flex-1 rounded p-2 -m-2"
                  >
                    {expandedClasses.has(classItem.className) ? (
                      <ChevronDown size={20} className="text-gray-500" />
                    ) : (
                      <ChevronRight size={20} className="text-gray-500" />
                    )}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{classItem.className}</h3>
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <span>{classItem.subjects.length} subjects</span>
                        <span>{classItem.subjects.filter(s => s.isActive).length} active</span>
                        {errorCount > 0 && (
                          <span className="flex items-center text-red-600">
                            <AlertTriangle size={14} className="mr-1" />
                            {errorCount} errors
                          </span>
                        )}
                      </div>
                    </div>
                  </button>

                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => addSubjectsFromTemplate(classItem.className)}
                      className="flex items-center space-x-1 px-3 py-2 text-sm text-green-600 hover:text-green-700 hover:bg-green-50 rounded-md"
                      title="Add subjects from template"
                    >
                      <Copy size={16} />
                      <span>Template</span>
                    </button>
                    <button
                      onClick={() => addSubject(classItem.className)}
                      className="flex items-center space-x-1 px-3 py-2 text-sm text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-md"
                    >
                      <Plus size={16} />
                      <span>Add Subject</span>
                    </button>
                  </div>
                </div>
              </div>

              {expandedClasses.has(classItem.className) && (
                <div className="p-4">
                  {classItem.subjects.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <BookOpen size={48} className="mx-auto mb-4 text-gray-300" />
                      <p className="mb-4">No subjects added yet.</p>
                      <div className="space-x-2">
                        <button
                          onClick={() => addSubject(classItem.className)}
                          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                        >
                          Add First Subject
                        </button>
                        <button
                          onClick={() => addSubjectsFromTemplate(classItem.className)}
                          className="px-4 py-2 border border-green-600 text-green-600 rounded-md hover:bg-green-50"
                        >
                          Use Template
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {classItem.subjects.map((subject, index) => {
                        const errorKey = `${classItem.className}-${index}`;
                        const hasError = validationErrors[errorKey];

                        return (
                          <div
                            key={index}
                            className={`p-4 border rounded-lg ${
                              hasError ? 'border-red-300 bg-red-50' : 'border-gray-200'
                            } ${!subject.isActive ? 'opacity-60 bg-gray-50' : ''}`}
                          >
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 items-start">
                              <div className="md:col-span-3">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Subject Name *
                                </label>
                                <input
                                  type="text"
                                  value={subject.name}
                                  onChange={(e) => updateSubject(classItem.className, index, 'name', e.target.value)}
                                  placeholder="e.g., Mathematics"
                                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                    hasError ? 'border-red-300' : 'border-gray-300'
                                  }`}
                                />
                              </div>

                              <div className="md:col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Code *
                                </label>
                                <input
                                  type="text"
                                  value={subject.code}
                                  onChange={(e) => updateSubject(classItem.className, index, 'code', e.target.value)}
                                  placeholder="e.g., MATH"
                                  maxLength={10}
                                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                    hasError ? 'border-red-300' : 'border-gray-300'
                                  }`}
                                />
                              </div>

                              <div className="md:col-span-4">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Description
                                </label>
                                <input
                                  type="text"
                                  value={subject.description || ''}
                                  onChange={(e) => updateSubject(classItem.className, index, 'description', e.target.value)}
                                  placeholder="Brief description of the subject"
                                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                />
                              </div>

                              <div className="md:col-span-1 flex items-end">
                                <label className="flex items-center space-x-2">
                                  <input
                                    type="checkbox"
                                    checked={subject.isActive}
                                    onChange={(e) => updateSubject(classItem.className, index, 'isActive', e.target.checked)}
                                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                  />
                                  <span className="text-sm text-gray-700">Active</span>
                                </label>
                              </div>

                              <div className="md:col-span-2 flex items-end space-x-1">
                                <button
                                  onClick={() => duplicateSubject(classItem.className, index)}
                                  className="p-2 text-gray-400 hover:text-blue-600 rounded"
                                  title="Duplicate subject"
                                >
                                  <Copy size={16} />
                                </button>
                                <button
                                  onClick={() => removeSubject(classItem.className, index)}
                                  className="p-2 text-gray-400 hover:text-red-600 rounded"
                                  title="Remove subject"
                                >
                                  <Trash2 size={16} />
                                </button>
                              </div>
                            </div>

                            {hasError && (
                              <div className="mt-2 text-sm text-red-600">
                                <ul className="list-disc list-inside space-y-1">
                                  {hasError.map((error, i) => (
                                    <li key={i}>{error}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {filteredClassSubjects.length === 0 && (
        <div className="text-center py-12 text-gray-500">
          <Search size={48} className="mx-auto mb-4 text-gray-300" />
          <p>No classes found matching your search criteria.</p>
        </div>
      )}
    </div>
  );
};

export default AcademicDetails;


      { name: 'Social Science', code: 'SS', description: 'History, geography, civics and economics' },
      { name: 'Hindi', code: 'HIN', description: 'Hindi language and literature' },
      { name: 'Computer Science', code: 'CS', description: 'Programming and computer applications' },
      { name: 'Physical Education', code: 'PE', description: 'Sports and physical fitness' }
    ],
    'Senior Secondary': [
      { name: 'English', code: 'ENG', description: 'Advanced English and literature' },
      { name: 'Mathematics', code: 'MATH', description: 'Advanced mathematics and calculus' },
      { name: 'Physics', code: 'PHY', description: 'Advanced physics concepts' },
      { name: 'Chemistry', code: 'CHEM', description: 'Organic and inorganic chemistry' },
      { name: 'Biology', code: 'BIO', description: 'Advanced biological sciences' },
      { name: 'Accountancy', code: 'ACC', description: 'Business accounting principles' },
      { name: 'Business Studies', code: 'BS', description: 'Business management concepts' },
      { name: 'Economics', code: 'ECO', description: 'Micro and macro economics' },
      { name: 'Computer Science', code: 'CS', description: 'Advanced programming and algorithms' },
      { name: 'Physical Education', code: 'PE', description: 'Advanced sports training' }
    ]
  };

  useEffect(() => {
    fetchSubjects();
  }, []);

  const fetchSubjects = async () => {
    setLoading(true);
    try {
      const headers: Record<string, string> = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };

      if (user?.schoolCode) {
        headers['x-school-code'] = user.schoolCode;
      }

      const response = await fetch('/api/subjects/all', { headers });

      if (response.ok) {
        const data = await response.json();
        const initialClassSubjects = standardClasses.map(className => ({
          className,
          subjects: data.subjects?.filter((subject: any) => subject.className === className) || []
        }));
        setClassSubjects(initialClassSubjects);
      } else {
        throw new Error('Failed to fetch subjects');
      }
    } catch (error) {
      console.error('Error fetching subjects:', error);
      toast.error('Failed to load subjects');
      const initialClassSubjects = standardClasses.map(className => ({
        className,
        subjects: []
      }));
      setClassSubjects(initialClassSubjects);
    } finally {
      setLoading(false);
    }
  };

  const validateSubjects = () => {
    const errors: ValidationErrors = {};

    classSubjects.forEach(classItem => {
      classItem.subjects.forEach((subject, index) => {
        const key = `${classItem.className}-${index}`;
        const subjectErrors: string[] = [];

        if (!subject.name.trim()) {
          subjectErrors.push('Subject name is required');
        }
        if (!subject.code.trim()) {
          subjectErrors.push('Subject code is required');
        } else if (subject.code.length < 2 || subject.code.length > 10) {
          subjectErrors.push('Subject code must be 2-10 characters');
        }

        // Check for duplicate codes within the same class
        const duplicateCode = classItem.subjects.find((s, i) =>
          i !== index && s.code.toUpperCase() === subject.code.toUpperCase() && s.code.trim()
        );
        if (duplicateCode) {
          subjectErrors.push('Subject code must be unique within the class');
        }

        if (subjectErrors.length > 0) {
          errors[key] = subjectErrors;
        }
      });
    });

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const saveChanges = async () => {
    if (!validateSubjects()) {
      toast.error('Please fix validation errors before saving');
      return;
    }

    setSaving(true);
    try {
      const allSubjects = classSubjects.flatMap(classItem =>
        classItem.subjects
          .filter(subject => subject.name.trim() && subject.code.trim())
          .map((subject, index) => ({
            ...subject,
            className: classItem.className,
            order: index
          }))
      );

      console.log('Sending subjects data:', allSubjects);

      const response = await fetch('/api/subjects/bulk-save', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          ...(user?.schoolCode && { 'x-school-code': user.schoolCode })
        },
        body: JSON.stringify({ subjects: allSubjects })
      });

      const responseText = await response.text();
      console.log('Response status:', response.status);
      console.log('Response text:', responseText);

      if (!response.ok) {
        let errorMessage = 'Failed to save subjects';
        try {
          const errorData = JSON.parse(responseText);
          errorMessage = errorData.message || errorData.error || errorMessage;
        } catch (e) {
          errorMessage = `Server error: ${response.status} ${response.statusText}`;
        }
        throw new Error(errorMessage);
      }

      toast.success('Subjects saved successfully');
      fetchSubjects();
    } catch (error: any) {
      console.error('Error saving subjects:', error);
      toast.error(`Failed to save subjects: ${error.message}`);
    } finally {
      setSaving(false);
    }
  };

  const toggleClassExpansion = (className: string) => {
    const newExpanded = new Set(expandedClasses);
    if (newExpanded.has(className)) {
      newExpanded.delete(className);
    } else {
      newExpanded.add(className);
    }
    setExpandedClasses(newExpanded);
  };

  const expandAll = () => {
    setExpandedClasses(new Set(filteredClassSubjects.map(c => c.className)));
  };

  const collapseAll = () => {
    setExpandedClasses(new Set());
  };

  const addSubject = (className: string) => {
    const newSubject: Subject = {
      name: '',
      code: '',
      description: '',
      isActive: true,
      order: 0
    };

    setClassSubjects(prev => prev.map(classItem =>
      classItem.className === className
        ? { ...classItem, subjects: [...classItem.subjects, newSubject] }
        : classItem
    ));

    if (!expandedClasses.has(className)) {
      setExpandedClasses(prev => new Set([...prev, className]));
    }
  };

  const addSubjectsFromTemplate = (className: string) => {
    const category = Object.keys(classCategories).find(cat =>
      classCategories[cat as keyof typeof classCategories].includes(className)
    ) as keyof typeof subjectTemplates;

    if (category && subjectTemplates[category]) {
      const templateSubjects = subjectTemplates[category].map((template, index) => ({
        ...template,
        isActive: true,
        order: index
      }));

      setClassSubjects(prev => prev.map(classItem =>
        classItem.className === className
          ? { ...classItem, subjects: [...classItem.subjects, ...templateSubjects] }
          : classItem
      ));

      if (!expandedClasses.has(className)) {
        setExpandedClasses(prev => new Set([...prev, className]));
      }

      toast.success(`Added ${templateSubjects.length} template subjects to ${className}`);
    }
  };

  const updateSubject = (className: string, subjectIndex: number, field: keyof Subject, value: string | boolean | number) => {
    setClassSubjects(prev => prev.map(classItem =>
      classItem.className === className
        ? {
            ...classItem,
            subjects: classItem.subjects.map((subject, index) =>
              index === subjectIndex
                ? { ...subject, [field]: field === 'code' ? String(value).toUpperCase() : value }
                : subject
            )
          }
        : classItem
    ));

    // Clear validation errors for this field
    const errorKey = `${className}-${subjectIndex}`;
    if (validationErrors[errorKey]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[errorKey];
        return newErrors;
      });
    }
  };

  const removeSubject = (className: string, subjectIndex: number) => {
    if (window.confirm('Are you sure you want to remove this subject?')) {
      setClassSubjects(prev => prev.map(classItem =>
        classItem.className === className
          ? {
              ...classItem,
              subjects: classItem.subjects.filter((_, index) => index !== subjectIndex)
            }
          : classItem
      ));
    }
  };

  const duplicateSubject = (className: string, subjectIndex: number) => {
    const originalSubject = classSubjects.find(c => c.className === className)?.subjects[subjectIndex];
    if (originalSubject) {
      const duplicatedSubject = {
        ...originalSubject,
        _id: undefined,
        name: `${originalSubject.name} (Copy)`,
        code: `${originalSubject.code}_COPY`
      };

      setClassSubjects(prev => prev.map(classItem =>
        classItem.className === className
          ? {
              ...classItem,
              subjects: [
                ...classItem.subjects.slice(0, subjectIndex + 1),
                duplicatedSubject,
                ...classItem.subjects.slice(subjectIndex + 1)
              ]
            }
          : classItem
      ));
    }
  };

  // Filter logic
  const filteredClassSubjects = classSubjects
    .filter(classItem => {
      if (selectedClass !== 'all' && classItem.className !== selectedClass) return false;
      if (searchTerm) {
        const hasMatchingSubject = classItem.subjects.some(subject =>
          subject.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          subject.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
          subject.description?.toLowerCase().includes(searchTerm.toLowerCase())
        );
        return hasMatchingSubject || classItem.className.toLowerCase().includes(searchTerm.toLowerCase());
      }
      return true;
    })
    .map(classItem => ({
      ...classItem,
      subjects: showInactive
        ? classItem.subjects
        : classItem.subjects.filter(subject => subject.isActive)
    }));

  // Export functionality
  const exportSubjects = () => {
    const dataToExport = classSubjects.map(classItem => ({
      class: classItem.className,
      subjects: classItem.subjects.map(subject => ({
        name: subject.name,
        code: subject.code,
        description: subject.description,
        isActive: subject.isActive
      }))
    }));

    const dataStr = JSON.stringify(dataToExport, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

    const exportFileDefaultName = `subjects-${user?.schoolCode || 'school'}-${new Date().toISOString().split('T')[0]}.json`;

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();

    toast.success('Subjects exported successfully');
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        <span className="ml-4 text-lg">Loading subjects...</span>
      </div>
    );
  }

  const totalSubjects = classSubjects.reduce((acc, classItem) => acc + classItem.subjects.length, 0);
  const activeSubjects = classSubjects.reduce((acc, classItem) =>
    acc + classItem.subjects.filter(s => s.isActive).length, 0
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 flex items-center">
              <BookOpen className="mr-3 text-blue-600" size={28} />
              Academic Details
            </h2>
            <p className="text-gray-600 mt-1">Manage subjects for each class in your school</p>
            <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
              <span>Total Classes: {standardClasses.length}</span>
              <span>Total Subjects: {totalSubjects}</span>
              <span>Active Subjects: {activeSubjects}</span>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={exportSubjects}
              className="flex items-center px-3 py-2 text-gray-700 hover:text-gray-900 border hover:bg-gray-50 rounded-md transition-colors"
            >
              <Download size={16} className="mr-2" />
              Export
            </button>
            <button
              onClick={saveChanges}
              disabled={saving}
              className={`flex items-center px-6 py-2 rounded-md font-medium transition-colors ${
                saving
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 text-white'
              }`}
            >
              <Save size={16} className="mr-2" />
              {saving ? 'Saving...' : 'Save Changes'}
            </button>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="flex flex-wrap items-center gap-4 p-4 bg-gray-50 rounded-lg">
          <div className="flex-1 min-w-64">
            <div className="relative">
              <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search subjects or classes..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <select
            value={selectedClass}
            onChange={(e) => setSelectedClass(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">All Classes</option>
            {Object.entries(classCategories).map(([category, classes]) => (
              <optgroup key={category} label={category}>
                {classes.map(className => (
                  <option key={className} value={className}>{className}</option>
                ))}
              </optgroup>
            ))}
          </select>

          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={showInactive}
              onChange={(e) => setShowInactive(e.target.checked)}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-sm text-gray-700">Show inactive</span>
          </label>

          <div className="flex items-center space-x-2">
            <button
              onClick={expandAll}
              className="px-3 py-1 text-xs text-blue-600 hover:text-blue-700"
            >
              Expand All
            </button>
            <button
              onClick={collapseAll}
              className="px-3 py-1 text-xs text-blue-600 hover:text-blue-700"
            >
              Collapse All
            </button>
          </div>
        </div>
      </div>

      {/* Subjects by Class */}
      <div className="space-y-4">
        {filteredClassSubjects.map((classItem) => {
          const errorCount = Object.keys(validationErrors).filter(key => key.startsWith(classItem.className)).length;

          return (
            <div key={classItem.className} className="bg-white rounded-lg shadow-sm border">
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <button
                    onClick={() => toggleClassExpansion(classItem.className)}
                    className="flex items-center space-x-3 text-left hover:bg-gray-50 flex-1 rounded p-2 -m-2"
                  >
                    {expandedClasses.has(classItem.className) ? (
                      <ChevronDown size={20} className="text-gray-500" />
                    ) : (
                      <ChevronRight size={20} className="text-gray-500" />
                    )}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{classItem.className}</h3>
                      <div className="flex items-center space-x-4 text-sm text-gray-500">
                        <span>{classItem.subjects.length} subjects</span>
                        <span>{classItem.subjects.filter(s => s.isActive).length} active</span>
                        {errorCount > 0 && (
                          <span className="flex items-center text-red-600">
                            <AlertTriangle size={14} className="mr-1" />
                            {errorCount} errors
                          </span>
                        )}
                      </div>
                    </div>
                  </button>

                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => addSubjectsFromTemplate(classItem.className)}
                      className="flex items-center space-x-1 px-3 py-2 text-sm text-green-600 hover:text-green-700 hover:bg-green-50 rounded-md"
                      title="Add subjects from template"
                    >
                      <Copy size={16} />
                      <span>Template</span>
                    </button>
                    <button
                      onClick={() => addSubject(classItem.className)}
                      className="flex items-center space-x-1 px-3 py-2 text-sm text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-md"
                    >
                      <Plus size={16} />
                      <span>Add Subject</span>
                    </button>
                  </div>
                </div>
              </div>

              {expandedClasses.has(classItem.className) && (
                <div className="p-4">
                  {classItem.subjects.length === 0 ? (
                    <div className="text-center py-8 text-gray-500">
                      <BookOpen size={48} className="mx-auto mb-4 text-gray-300" />
                      <p className="mb-4">No subjects added yet.</p>
                      <div className="space-x-2">
                        <button
                          onClick={() => addSubject(classItem.className)}
                          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                        >
                          Add First Subject
                        </button>
                        <button
                          onClick={() => addSubjectsFromTemplate(classItem.className)}
                          className="px-4 py-2 border border-green-600 text-green-600 rounded-md hover:bg-green-50"
                        >
                          Use Template
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {classItem.subjects.map((subject, index) => {
                        const errorKey = `${classItem.className}-${index}`;
                        const hasError = validationErrors[errorKey];

                        return (
                          <div
                            key={index}
                            className={`p-4 border rounded-lg ${
                              hasError ? 'border-red-300 bg-red-50' : 'border-gray-200'
                            } ${!subject.isActive ? 'opacity-60 bg-gray-50' : ''}`}
                          >
                            <div className="grid grid-cols-1 md:grid-cols-12 gap-4 items-start">
                              <div className="md:col-span-3">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Subject Name *
                                </label>
                                <input
                                  type="text"
                                  value={subject.name}
                                  onChange={(e) => updateSubject(classItem.className, index, 'name', e.target.value)}
                                  placeholder="e.g., Mathematics"
                                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                    hasError ? 'border-red-300' : 'border-gray-300'
                                  }`}
                                />
                              </div>

                              <div className="md:col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Code *
                                </label>
                                <input
                                  type="text"
                                  value={subject.code}
                                  onChange={(e) => updateSubject(classItem.className, index, 'code', e.target.value)}
                                  placeholder="e.g., MATH"
                                  maxLength={10}
                                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                                    hasError ? 'border-red-300' : 'border-gray-300'
                                  }`}
                                />
                              </div>

                              <div className="md:col-span-4">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Description
                                </label>
                                <input
                                  type="text"
                                  value={subject.description || ''}
                                  onChange={(e) => updateSubject(classItem.className, index, 'description', e.target.value)}
                                  placeholder="Brief description of the subject"
                                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                />
                              </div>

                              <div className="md:col-span-1 flex items-end">
                                <label className="flex items-center space-x-2">
                                  <input
                                    type="checkbox"
                                    checked={subject.isActive}
                                    onChange={(e) => updateSubject(classItem.className, index, 'isActive', e.target.checked)}
                                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                  />
                                  <span className="text-sm text-gray-700">Active</span>
                                </label>
                              </div>

                              <div className="md:col-span-2 flex items-end space-x-1">
                                <button
                                  onClick={() => duplicateSubject(classItem.className, index)}
                                  className="p-2 text-gray-400 hover:text-blue-600 rounded"
                                  title="Duplicate subject"
                                >
                                  <Copy size={16} />
                                </button>
                                <button
                                  onClick={() => removeSubject(classItem.className, index)}
                                  className="p-2 text-gray-400 hover:text-red-600 rounded"
                                  title="Remove subject"
                                >
                                  <Trash2 size={16} />
                                </button>
                              </div>
                            </div>

                            {hasError && (
                              <div className="mt-2 text-sm text-red-600">
                                <ul className="list-disc list-inside space-y-1">
                                  {hasError.map((error, i) => (
                                    <li key={i}>{error}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  )}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {filteredClassSubjects.length === 0 && (
        <div className="text-center py-12 text-gray-500">
          <Search size={48} className="mx-auto mb-4 text-gray-300" />
          <p>No classes found matching your search criteria.</p>
        </div>
      )}
    </div>
  );
};

export default AcademicDetails;
      name: '',
      code: '',
      description: '',
      isActive: true
    };

    setClassSubjects(prev => prev.map(classItem => 
      classItem.className === className 
        ? { ...classItem, subjects: [...classItem.subjects, newSubject] }
        : classItem
    ));

    // Expand the class if not already expanded
    if (!expandedClasses.has(className)) {
      setExpandedClasses(prev => new Set([...prev, className]));
    }
  };

  const removeSubject = (className: string, subjectIndex: number) => {
    if (window.confirm('Are you sure you want to remove this subject?')) {
      setClassSubjects(prev => prev.map(classItem =>
        classItem.className === className
          ? {
              ...classItem,
              subjects: classItem.subjects.filter((_, index) => index !== subjectIndex)
            }
          : classItem
      ));
    }
  };

  const saveChanges = async () => {
    setSaving(true);
    try {
      // Prepare subjects data for saving
      const allSubjects = classSubjects.flatMap(classItem => 
        classItem.subjects
          .filter(subject => subject.name.trim() && subject.code.trim())
          .map(subject => ({
            ...subject,
            className: classItem.className
          }))
      );

      const response = await fetch('/api/subjects/bulk-save', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
          ...(user?.schoolCode && { 'x-school-code': user.schoolCode })
        },
        body: JSON.stringify({ subjects: allSubjects })
      });

      if (response.ok) {
        toast.success('Subjects saved successfully');
        fetchSubjects(); // Refresh data
      } else {
        throw new Error('Failed to save subjects');
      }
    } catch (error) {
      console.error('Error saving subjects:', error);
      toast.error('Failed to save subjects');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Academic Details</h1>
          <p className="text-gray-600 mt-1">Manage subjects for each class</p>
        </div>
        <button
          onClick={saveChanges}
          disabled={saving}
          className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
        >
          <Save className="h-4 w-4" />
          <span>{saving ? 'Saving...' : 'Save Changes'}</span>
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-sm border">
        <div className="p-6">
          <div className="flex items-center space-x-2 mb-6">
            <BookOpen className="h-5 w-5 text-blue-600" />
            <h2 className="text-lg font-semibold text-gray-900">Subjects</h2>
          </div>

          <div className="space-y-4">
            {classSubjects.map((classItem) => (
              <div key={classItem.className} className="border rounded-lg">
                <div className="flex items-center justify-between p-4">
                  <button
                    onClick={() => toggleClassExpansion(classItem.className)}
                    className="flex items-center space-x-3 text-left hover:bg-gray-50 flex-1 rounded"
                  >
                    {expandedClasses.has(classItem.className) ? (
                      <ChevronDown className="h-4 w-4 text-gray-500" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-gray-500" />
                    )}
                    <span className="font-medium text-gray-900">{classItem.className}</span>
                    <span className="text-sm text-gray-500">
                      ({classItem.subjects.length} subjects)
                    </span>
                  </button>
                  <button
                    onClick={() => addSubject(classItem.className)}
                    className="flex items-center space-x-1 text-blue-600 hover:text-blue-700 ml-4"
                  >
                    <Plus className="h-4 w-4" />
                    <span className="text-sm">Add Subject</span>
                  </button>
                </div>

                {expandedClasses.has(classItem.className) && (
                  <div className="border-t bg-gray-50 p-4">
                    {classItem.subjects.length === 0 ? (
                      <p className="text-gray-500 text-center py-4">
                        No subjects added yet. Click "Add Subject" to get started.
                      </p>
                    ) : (
                      <div className="space-y-3">
                        {classItem.subjects.map((subject, index) => (
                          <div key={index} className="flex items-center space-x-3 bg-white p-3 rounded border">
                            <div className="flex-1 grid grid-cols-1 md:grid-cols-3 gap-3">
                              <input
                                type="text"
                                placeholder="Subject Name"
                                value={subject.name}
                                onChange={(e) => updateSubject(classItem.className, index, 'name', e.target.value)}
                                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              />
                              <input
                                type="text"
                                placeholder="Subject Code"
                                value={subject.code}
                                onChange={(e) => updateSubject(classItem.className, index, 'code', e.target.value)}
                                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              />
                              <input
                                type="text"
                                placeholder="Description (optional)"
                                value={subject.description || ''}
                                onChange={(e) => updateSubject(classItem.className, index, 'description', e.target.value)}
                                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              />
                            </div>
                            <div className="flex items-center space-x-2">
                              <label className="flex items-center space-x-2">
                                <input
                                  type="checkbox"
                                  checked={subject.isActive}
                                  onChange={(e) => updateSubject(classItem.className, index, 'isActive', e.target.checked)}
                                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                />
                                <span className="text-sm text-gray-600">Active</span>
                              </label>
                              <button
                                onClick={() => removeSubject(classItem.className, index)}
                                className="p-1 text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AcademicDetails;
